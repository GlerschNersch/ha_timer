blueprint:
  name: Start or Resume Timer with Actions
  description: >
    Starts or resumes a timer when a button is pressed. Logs remaining time and optionally
    notifies, announces via TTS, activates a scene, and controls a light.
  domain: automation
  input:
    trigger_button:
      name: Input Button
      description: The input_button entity to trigger the timer
      selector:
        entity:
          domain: input_button

    target_timer:
      name: Timer
      description: The timer entity to start or resume
      selector:
        entity:
          domain: timer

    notify_user:
      name: Notify User
      description: Notify the user with time remaining
      default: false
      selector:
        boolean:

    use_tts:
      name: Use TTS Announcement
      description: Announce remaining time using TTS
      default: false
      selector:
        boolean:

    media_player:
      name: Media Player
      description: Required for TTS announcement
      default: null
      selector:
        entity:
          domain: media_player

    light_entity:
      name: Light to Control
      description: Optional light to turn on/off when timer starts
      default: null
      selector:
        entity:
          domain: light

    light_action:
      name: Light Action
      description: Action to take on the light (on/off/none)
      default: "none"
      selector:
        select:
          options:
            - "on"
            - "off"
            - "none"

    scene_to_activate:
      name: Scene to Activate
      description: Optional scene to activate when the timer starts
      default: null
      selector:
        entity:
          domain: scene

mode: single

trigger:
  - platform: state
    entity_id: !input trigger_button
    to: "on"

variables:
  timer_entity: !input target_timer
  remaining: "{{ state_attr(timer_entity, 'remaining') }}"
  is_active: "{{ is_state(timer_entity, 'active') }}"
  is_paused: "{{ is_state(timer_entity, 'paused') }}"

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ is_paused }}"
        sequence:
          - service: timer.resume
            target:
              entity_id: "{{ timer_entity }}"
      - conditions:
          - condition: template
            value_template: "{{ not is_active }}"
        sequence:
          - service: timer.start
            target:
              entity_id: "{{ timer_entity }}"

  - delay: "00:00:01"

  - variables:
      updated_remaining: "{{ state_attr(timer_entity, 'remaining') }}"

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ not notify_user }}"
        sequence:
          - service: logbook.log
            data:
              name: Timer Info
              message: "Timer '{{ timer_entity }}' started with {{ updated_remaining }} remaining."

      - conditions:
          - condition: template
            value_template: "{{ notify_user }}"
        sequence:
          - service: persistent_notification.create
            data:
              title: Timer Started
              message: "Timer '{{ timer_entity }}' has {{ updated_remaining }} remaining."

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ use_tts and media_player is not none }}"
        sequence:
          - service: tts.google_translate_say
            data:
              entity_id: !input media_player
              message: >
                Timer started. You have {{ updated_remaining.split('.')[0].replace(':', ' minutes and ') }} seconds remaining.

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ scene_to_activate is not none }}"
        sequence:
          - service: scene.turn_on
            target:
              entity_id: !input scene_to_activate

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ light_action == 'on' and light_entity is not none }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input light_entity
      - conditions:
          - condition: template
            value_template: "{{ light_action == 'off' and light_entity is not none }}"
        sequence:
          - service: light.turn_off
            target:
              entity_id: !input light_entity
